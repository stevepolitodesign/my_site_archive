---
http_interactions:
- request:
    method: get
    uri: https://guides.rubyonrails.org/getting_started.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.14.0 (Ubuntu)
      Date:
      - Tue, 17 Nov 2020 00:48:22 GMT
      Content-Type:
      - text/html
      Content-Length:
      - '27246'
      Last-Modified:
      - Wed, 07 Oct 2020 17:09:19 GMT
      Connection:
      - keep-alive
      Etag:
      - '"5f7df63f-6a6e"'
      Strict-Transport-Security:
      - max-age=63072000; includeSubdomains;
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Tue, 24 Nov 2020 00:48:22 GMT
- request:
    method: get
    uri: https://rubyonrails.org/doctrine/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '16107'
      Server:
      - GitHub.com
      Content-Type:
      - text/html; charset=utf-8
      Last-Modified:
      - Thu, 08 Oct 2020 03:50:11 GMT
      Etag:
      - W/"5f7e8c73-a26a"
      Access-Control-Allow-Origin:
      - "*"
      Expires:
      - Mon, 16 Nov 2020 23:35:52 GMT
      Cache-Control:
      - max-age=600
      X-Proxy-Cache:
      - MISS
      X-Github-Request-Id:
      - 190E:3404:CDE796:F9A8D2:5FB30A7F
      Accept-Ranges:
      - bytes
      Date:
      - Tue, 17 Nov 2020 00:48:23 GMT
      Via:
      - 1.1 varnish
      Age:
      - '239'
      X-Served-By:
      - cache-bos4673-BOS
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Timer:
      - S1605574103.003416,VS0,VE1
      Vary:
      - Accept-Encoding
      X-Fastly-Request-Id:
      - 0d5859312784e6fe929f507e461febaf0d02934e
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Tue, 24 Nov 2020 00:48:22 GMT
recorded_with: VCR 6.0.0
